var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HistogramBinnings","category":"page"},{"location":"#HistogramBinnings","page":"Home","title":"HistogramBinnings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HistogramBinnings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HistogramBinnings]","category":"page"},{"location":"#HistogramBinnings.LinEdgeVector","page":"Home","title":"HistogramBinnings.LinEdgeVector","text":"LinEdgeVector{T}(; lo = 1, hi = 10, nbins::Integer) where T <: Real\n\nConstruct a linearly spaced edge vector of type T. The edges are spaced evenly in linear space. lo and hi are the lower and upper limits of the histogram. nbins is the number of bins.\n\nExamples\n\nusing StatsBase, HistogramBinnings\n\nh = Histogram(LinEdgeVector(lo = 1, hi = 1_000_000, nbins = 60))\nappend!(h, vs)\n\n\n\n\n\n","category":"type"},{"location":"#HistogramBinnings.LogEdgeVector","page":"Home","title":"HistogramBinnings.LogEdgeVector","text":"LogEdgeVector{T}(; lo = 1, hi = 10, nbins::Integer) where T <: Real\n\nConstruct a logarithmically spaced edge vector of type T. The edges are spaced evenly in log space. lo and hi are the lower and upper limits of the histogram. nbins is the number of bins.\n\nExamples\n\nusing StatsBase, HistogramBinnings\n\nh = Histogram(LogEdgeVector(lo = 1, hi = 1_000_000, nbins = 60))\nappend!(h, vs)\n\n\n\n\n\n","category":"type"},{"location":"#StatsAPI.fit-Union{Tuple{T}, Tuple{Type{StatsBase.Histogram}, Type{T}, AbstractVector{T} where T}} where T<:HistogramBinnings.AbstractEdgeVector","page":"Home","title":"StatsAPI.fit","text":"fit(::Type{Histogram}, ::Type{T}, vs::AbstractVector;\n    nbins = sturges(length(vs)),\n    lo = minimum(vs),\n    hi = maximum(vs)\n) where T <: AbstractEdgeVector\n\nFit a histogram with edges T to the data vs.\n\nT is either LogEdgeVector or LinEdgeVector. The edges are Int if  the vs are Int otherwise they are Float64. lo and hi are the lower and upper limits of the histogram. nbins is the number of bins. \n\nExamples\n\nusing StatsBase, HistogramBinnings\nusing Distributions\n\nvs = floor.(Int, rand(Pareto(), 10000000))\n\nh = fit(Histogram, LogEdgeVector, vs)\n\n# or \n\nh = Histogram(LogEdgeVector(lo = 1, hi = 1_000_000, nbins = 60))\nappend!(h1, vs)\n\n\n\n\n\n","category":"method"},{"location":"#StatsBase.midpoints-Union{Tuple{LogEdgeVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"StatsBase.midpoints","text":"midpoints(r::AbstractEdgeVector{T}) where T\n\nReturn the midpoints of the bins in r.\n\n\n\n\n\n","category":"method"}]
}
